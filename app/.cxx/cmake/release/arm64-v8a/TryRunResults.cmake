# This file was generated by CMake because it detected TRY_RUN() commands
# in crosscompiling mode. It will be overwritten by the next CMake run.
# Copy it to a safe location, set the variables to appropriate values
# and use it then to preset the CMake cache (using -C).


# HAVE_FSETXATTR_5
#    indicates whether the executable would have been able to run on its
#    target platform. If so, set HAVE_FSETXATTR_5 to
#    the exit code (in many cases 0 for success), otherwise enter "FAILED_TO_RUN".
# HAVE_FSETXATTR_5__TRYRUN_OUTPUT
#    contains the text the executable would have printed on stdout and stderr.
#    If the executable would not have been able to run, set HAVE_FSETXATTR_5__TRYRUN_OUTPUT empty.
#    Otherwise check if the output is evaluated by the calling CMake code. If so,
#    check what the source file would have printed when called with the given arguments.
# The HAVE_FSETXATTR_5_COMPILE variable holds the build result for this TRY_RUN().
# 
# Source file   : /Users/anhdnt/Project/TestLib/app/src/main/cpp/opt/cpr/opt/curl/CMake/CurlTests.c
# Executable    : /Users/anhdnt/Project/TestLib/app/.cxx/cmake/release/arm64-v8a/CMakeFiles/cmTC_4c5fb-HAVE_FSETXATTR_5
# Run arguments : 
#    Called from: [2]	/Users/anhdnt/Project/TestLib/app/src/main/cpp/opt/cpr/opt/curl/CMake/Macros.cmake
#                 [1]	/Users/anhdnt/Project/TestLib/app/src/main/cpp/opt/cpr/opt/curl/CMakeLists.txt

set( HAVE_FSETXATTR_5 
     "PLEASE_FILL_OUT-FAILED_TO_RUN"
     CACHE STRING "Result from TRY_RUN" FORCE)

set( HAVE_FSETXATTR_5__TRYRUN_OUTPUT 
     "PLEASE_FILL_OUT-NOTFOUND"
     CACHE STRING "Output from TRY_RUN" FORCE)


# HAVE_GLIBC_STRERROR_R
#    indicates whether the executable would have been able to run on its
#    target platform. If so, set HAVE_GLIBC_STRERROR_R to
#    the exit code (in many cases 0 for success), otherwise enter "FAILED_TO_RUN".
# HAVE_GLIBC_STRERROR_R__TRYRUN_OUTPUT
#    contains the text the executable would have printed on stdout and stderr.
#    If the executable would not have been able to run, set HAVE_GLIBC_STRERROR_R__TRYRUN_OUTPUT empty.
#    Otherwise check if the output is evaluated by the calling CMake code. If so,
#    check what the source file would have printed when called with the given arguments.
# The HAVE_GLIBC_STRERROR_R_COMPILE variable holds the build result for this TRY_RUN().
# 
# Source file   : /Users/anhdnt/Project/TestLib/app/src/main/cpp/opt/cpr/opt/curl/CMake/CurlTests.c
# Executable    : /Users/anhdnt/Project/TestLib/app/.cxx/cmake/release/arm64-v8a/CMakeFiles/cmTC_392d2-HAVE_GLIBC_STRERROR_R
# Run arguments : 
#    Called from: [2]	/Users/anhdnt/Project/TestLib/app/src/main/cpp/opt/cpr/opt/curl/CMake/Macros.cmake
#                 [1]	/Users/anhdnt/Project/TestLib/app/src/main/cpp/opt/cpr/opt/curl/CMakeLists.txt

set( HAVE_GLIBC_STRERROR_R 
     "PLEASE_FILL_OUT-FAILED_TO_RUN"
     CACHE STRING "Result from TRY_RUN" FORCE)

set( HAVE_GLIBC_STRERROR_R__TRYRUN_OUTPUT 
     "PLEASE_FILL_OUT-NOTFOUND"
     CACHE STRING "Output from TRY_RUN" FORCE)


# HAVE_POSIX_STRERROR_R
#    indicates whether the executable would have been able to run on its
#    target platform. If so, set HAVE_POSIX_STRERROR_R to
#    the exit code (in many cases 0 for success), otherwise enter "FAILED_TO_RUN".
# HAVE_POSIX_STRERROR_R__TRYRUN_OUTPUT
#    contains the text the executable would have printed on stdout and stderr.
#    If the executable would not have been able to run, set HAVE_POSIX_STRERROR_R__TRYRUN_OUTPUT empty.
#    Otherwise check if the output is evaluated by the calling CMake code. If so,
#    check what the source file would have printed when called with the given arguments.
# The HAVE_POSIX_STRERROR_R_COMPILE variable holds the build result for this TRY_RUN().
# 
# Source file   : /Users/anhdnt/Project/TestLib/app/src/main/cpp/opt/cpr/opt/curl/CMake/CurlTests.c
# Executable    : /Users/anhdnt/Project/TestLib/app/.cxx/cmake/release/arm64-v8a/CMakeFiles/cmTC_fa57a-HAVE_POSIX_STRERROR_R
# Run arguments : 
#    Called from: [2]	/Users/anhdnt/Project/TestLib/app/src/main/cpp/opt/cpr/opt/curl/CMake/Macros.cmake
#                 [1]	/Users/anhdnt/Project/TestLib/app/src/main/cpp/opt/cpr/opt/curl/CMakeLists.txt

set( HAVE_POSIX_STRERROR_R 
     "PLEASE_FILL_OUT-FAILED_TO_RUN"
     CACHE STRING "Result from TRY_RUN" FORCE)

set( HAVE_POSIX_STRERROR_R__TRYRUN_OUTPUT 
     "PLEASE_FILL_OUT-NOTFOUND"
     CACHE STRING "Output from TRY_RUN" FORCE)


# HAVE_POLL_FINE_EXITCODE
#    indicates whether the executable would have been able to run on its
#    target platform. If so, set HAVE_POLL_FINE_EXITCODE to
#    the exit code (in many cases 0 for success), otherwise enter "FAILED_TO_RUN".
# The HAVE_POLL_FINE_COMPILED variable holds the build result for this TRY_RUN().
# 
# Source file   : /Users/anhdnt/Project/TestLib/app/.cxx/cmake/release/arm64-v8a/CMakeFiles/CMakeTmp/src.c
# Executable    : /Users/anhdnt/Project/TestLib/app/.cxx/cmake/release/arm64-v8a/CMakeFiles/cmTC_7cbdb-HAVE_POLL_FINE_EXITCODE
# Run arguments : 
#    Called from: [3]	/Users/anhdnt/Library/Android/sdk/cmake/3.10.2.4988404/share/cmake-3.10/Modules/CheckCSourceRuns.cmake
#                 [2]	/Users/anhdnt/Project/TestLib/app/src/main/cpp/opt/cpr/opt/curl/CMake/OtherTests.cmake
#                 [1]	/Users/anhdnt/Project/TestLib/app/src/main/cpp/opt/cpr/opt/curl/CMakeLists.txt

set( HAVE_POLL_FINE_EXITCODE 
     "PLEASE_FILL_OUT-FAILED_TO_RUN"
     CACHE STRING "Result from TRY_RUN" FORCE)

